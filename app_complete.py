"""
VEO 3.1 Complete Automation System
H·ªá th·ªëng t·ª± ƒë·ªông h√≥a ho√†n ch·ªânh cho VEO 3.1
"""

import gradio as gr
import os
import sys
import io
import json
import asyncio
from datetime import datetime
from pathlib import Path
import shutil
from typing import Dict, List, Optional

# Fix Windows encoding
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

from dotenv import load_dotenv
from src.script_generator import ScriptGenerator
from src.browser_automation.flow_controller import FlowController
from src.video_assembler import VideoAssembler

# Load environment
load_dotenv()

# ========== Global State Management ==========

class ProjectState:
    """Manages the complete project state"""
    def __init__(self):
        self.project_id = None
        self.project_name = None
        self.gemini_api_key = None
        self.output_folder = "./data/projects"
        self.model = "gemini-2.0-flash-exp"
        self.script = None
        self.scenes = []  # List of scene states
        self.seo_content = None
        self.final_video_path = None

    def create_new_project(self, project_name: str):
        """Initialize a new project"""
        self.project_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.project_name = project_name
        project_dir = os.path.join(self.output_folder, f"{self.project_id}_{project_name}")
        os.makedirs(project_dir, exist_ok=True)
        os.makedirs(os.path.join(project_dir, "scenes"), exist_ok=True)
        os.makedirs(os.path.join(project_dir, "downloads"), exist_ok=True)
        return project_dir

    def get_project_dir(self):
        """Get current project directory"""
        if not self.project_id or not self.project_name:
            return None
        return os.path.join(self.output_folder, f"{self.project_id}_{self.project_name}")

    def save_state(self):
        """Save project state to file"""
        project_dir = self.get_project_dir()
        if not project_dir:
            return

        state_file = os.path.join(project_dir, "project_state.json")
        state_data = {
            "project_id": self.project_id,
            "project_name": self.project_name,
            "model": self.model,
            "script": self.script,
            "scenes": self.scenes,
            "seo_content": self.seo_content,
            "final_video_path": self.final_video_path,
            "last_updated": datetime.now().isoformat()
        }

        with open(state_file, 'w', encoding='utf-8') as f:
            json.dump(state_data, f, ensure_ascii=False, indent=2)

    def load_state(self, project_dir: str):
        """Load project state from file"""
        state_file = os.path.join(project_dir, "project_state.json")
        if not os.path.exists(state_file):
            return False

        with open(state_file, 'r', encoding='utf-8') as f:
            state_data = json.load(f)

        self.project_id = state_data.get("project_id")
        self.project_name = state_data.get("project_name")
        self.model = state_data.get("model", "gemini-2.0-flash-exp")
        self.script = state_data.get("script")
        self.scenes = state_data.get("scenes", [])
        self.seo_content = state_data.get("seo_content")
        self.final_video_path = state_data.get("final_video_path")

        return True

# Global project state
project = ProjectState()


# ========== API Key Management ==========

def load_api_key_from_file(file_path: str) -> tuple:
    """Load API key from TXT file"""
    try:
        if not file_path:
            return "‚ùå Vui l√≤ng ch·ªçn file API key", None

        with open(file_path, 'r', encoding='utf-8') as f:
            api_key = f.read().strip()

        if not api_key:
            return "‚ùå File r·ªóng, kh√¥ng c√≥ API key", None

        # Test API key by creating ScriptGenerator
        try:
            generator = ScriptGenerator(api_key)
            project.gemini_api_key = api_key

            # Save to .env
            env_path = ".env"
            env_content = f"GEMINI_API_KEY={api_key}\n"

            if os.path.exists(env_path):
                with open(env_path, 'r') as f:
                    lines = f.readlines()

                updated = False
                for i, line in enumerate(lines):
                    if line.startswith("GEMINI_API_KEY="):
                        lines[i] = env_content
                        updated = True
                        break

                if not updated:
                    lines.append(env_content)

                with open(env_path, 'w') as f:
                    f.writelines(lines)
            else:
                with open(env_path, 'w') as f:
                    f.write(env_content)

            return f"‚úÖ API key ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!\n\nKey: {api_key[:20]}...{api_key[-10:]}", api_key

        except Exception as e:
            return f"‚ùå API key kh√¥ng h·ª£p l·ªá: {str(e)}", None

    except Exception as e:
        return f"‚ùå L·ªói ƒë·ªçc file: {str(e)}", None


# ========== Project Initialization ==========

def initialize_project(project_name: str, output_folder: str, model: str) -> str:
    """Initialize a new project"""
    try:
        if not project_name:
            return "‚ùå Vui l√≤ng nh·∫≠p t√™n d·ª± √°n"

        if not project.gemini_api_key:
            return "‚ùå Vui l√≤ng t·∫£i API key tr∆∞·ªõc"

        project.output_folder = output_folder or "./data/projects"
        project.model = model

        project_dir = project.create_new_project(project_name)
        project.save_state()

        return f"""‚úÖ D·ª± √°n ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!

üìÅ **T√™n d·ª± √°n**: {project_name}
üÜî **Project ID**: {project_id}
üìÇ **Th∆∞ m·ª•c**: {project_dir}
ü§ñ **Model**: {model}

B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu t·∫°o k·ªãch b·∫£n ·ªü tab ti·∫øp theo.
"""

    except Exception as e:
        return f"‚ùå L·ªói kh·ªüi t·∫°o d·ª± √°n: {str(e)}"


# ========== Enhanced Script Generation ==========

def generate_script_with_characters(
    topic: str,
    duration: int,
    scene_duration: int,
    style: str,
    aspect_ratio: str,
    character_mode: str,
    character_images: Optional[List] = None,
    character_descriptions: str = ""
) -> tuple:
    """Generate script with character support"""
    try:
        if not project.gemini_api_key:
            return "‚ùå Vui l√≤ng t·∫£i API key tr∆∞·ªõc", None, ""

        if not topic:
            return "‚ùå Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ video", None, ""

        if not project.project_id:
            return "‚ùå Vui l√≤ng kh·ªüi t·∫°o d·ª± √°n tr∆∞·ªõc", None, ""

        # Create script generator
        generator = ScriptGenerator(project.gemini_api_key)

        # Build character context
        character_context = ""
        if character_mode == "AI t·ª± nh·∫≠n di·ªán":
            character_context = "AI s·∫Ω t·ª± ƒë·ªông t·∫°o v√† duy tr√¨ nh·∫•t qu√°n c√°c nh√¢n v·∫≠t trong video."
        elif character_mode == "Upload ·∫£nh nh√¢n v·∫≠t":
            if character_images:
                # Save character images to project
                project_dir = project.get_project_dir()
                char_dir = os.path.join(project_dir, "characters")
                os.makedirs(char_dir, exist_ok=True)

                saved_chars = []
                for idx, img in enumerate(character_images):
                    if img:
                        char_path = os.path.join(char_dir, f"character_{idx+1}.jpg")
                        shutil.copy(img, char_path)
                        saved_chars.append(char_path)

                character_context = f"S·ª≠ d·ª•ng {len(saved_chars)} nh√¢n v·∫≠t t·ª´ ·∫£nh ƒë√£ upload. "

            if character_descriptions:
                character_context += f"M√¥ t·∫£ nh√¢n v·∫≠t: {character_descriptions}"

        # Generate script with character context
        enhanced_topic = f"{topic}\n\n{character_context}" if character_context else topic

        script = generator.generate_script(
            topic=enhanced_topic,
            duration=duration,
            scene_duration=scene_duration,
            style=style,
            aspect_ratio=aspect_ratio
        )

        # Save script
        project.script = script
        project_dir = project.get_project_dir()
        script_file = os.path.join(project_dir, "script.json")

        with open(script_file, 'w', encoding='utf-8') as f:
            json.dump(script, f, ensure_ascii=False, indent=2)

        # Initialize scene states
        project.scenes = []
        for i, scene in enumerate(script['scenes']):
            project.scenes.append({
                "scene_index": i,
                "scene_number": i + 1,
                "prompt": scene['veo_prompt'],
                "description": scene['description'],
                "duration": scene['duration'],
                "status": "pending",  # pending, generating, completed, failed, rejected
                "video_url": None,
                "download_path": None,
                "error": None,
                "approved": False
            })

        project.save_state()

        # Format output
        script_json = json.dumps(script, ensure_ascii=False, indent=2)

        summary = f"""‚úÖ K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o!

üìù **T·ªïng s·ªë c·∫£nh**: {len(script['scenes'])}
‚è±Ô∏è **T·ªïng th·ªùi l∆∞·ª£ng**: {duration}s
üé¨ **Style**: {style}
üìê **T·ª∑ l·ªá**: {aspect_ratio}

K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {script_file}
"""

        return summary, script_json, script_file

    except Exception as e:
        return f"‚ùå L·ªói t·∫°o k·ªãch b·∫£n: {str(e)}", None, ""


# ========== SEO Content Generator ==========

def generate_seo_content(script_json: str) -> tuple:
    """Generate SEO content for YouTube"""
    try:
        if not script_json:
            return "‚ùå Ch∆∞a c√≥ k·ªãch b·∫£n", ""

        script = json.loads(script_json)

        # Generate title
        title = script.get('title', 'Video t·ª± ƒë·ªông t·ª´ VEO 3.1')

        # Generate description
        description_lines = [
            f"üé¨ {title}",
            "",
            "üìù M√¥ t·∫£:",
            script.get('description', ''),
            "",
            "üéØ C√°c c·∫£nh trong video:",
        ]

        for i, scene in enumerate(script.get('scenes', []), 1):
            description_lines.append(f"{i}. {scene.get('description', '')}")

        description_lines.extend([
            "",
            "ü§ñ Video ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·∫±ng VEO 3.1",
            "",
            "#VEO #AI #VideoGeneration #AutomatedVideo"
        ])

        description = "\n".join(description_lines)

        # Generate tags
        tags = [
            "VEO 3.1",
            "AI Video",
            "Video t·ª± ƒë·ªông",
            "Generative AI",
            script.get('style', 'Cinematic'),
        ]

        # Add keywords from scenes
        for scene in script.get('scenes', []):
            words = scene.get('description', '').split()[:3]
            tags.extend(words)

        tags = list(set(tags))[:15]  # Limit to 15 unique tags
        tags_text = ", ".join(tags)

        # Generate thumbnail prompt
        first_scene = script.get('scenes', [{}])[0]
        thumbnail_prompt = f"T·∫°o thumbnail cho video: {title}. C·∫£nh ch√≠nh: {first_scene.get('description', '')}. Style: {script.get('style', 'Cinematic')}, bold text overlay v·ªõi ti√™u ƒë·ªÅ, high quality, eye-catching"

        # Build SEO content
        seo_content = f"""TI√äU ƒê·ªÄ:
{title}

M√î T·∫¢:
{description}

TAGS:
{tags_text}

THUMBNAIL PROMPT:
{thumbnail_prompt}
"""

        # Save SEO content
        project.seo_content = seo_content
        project_dir = project.get_project_dir()
        if project_dir:
            seo_file = os.path.join(project_dir, "seo_content.txt")
            with open(seo_file, 'w', encoding='utf-8') as f:
                f.write(seo_content)

            project.save_state()

            return f"‚úÖ N·ªôi dung SEO ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u v√†o:\n{seo_file}", seo_content

        return "‚úÖ N·ªôi dung SEO ƒë√£ ƒë∆∞·ª£c t·∫°o", seo_content

    except Exception as e:
        return f"‚ùå L·ªói t·∫°o SEO: {str(e)}", ""


# ========== Video Generation with Progress ==========

async def generate_all_videos_async(cookies_file: str, headless: bool = True) -> str:
    """Generate videos for all scenes"""
    try:
        if not project.script:
            return "‚ùå Ch∆∞a c√≥ k·ªãch b·∫£n"

        if not os.path.exists(cookies_file):
            return f"‚ùå File cookies kh√¥ng t·ªìn t·∫°i: {cookies_file}"

        project_dir = project.get_project_dir()
        download_dir = os.path.join(project_dir, "downloads")

        # Initialize controller
        controller = FlowController(cookies_file, download_dir, headless=headless)

        # Generate videos for each scene
        results = []
        for i, scene_state in enumerate(project.scenes):
            scene = project.script['scenes'][i]

            # Update status
            scene_state['status'] = 'generating'
            project.save_state()

            try:
                # Generate video
                video_url = await controller.generate_video_flow(
                    prompt=scene['veo_prompt'],
                    duration=scene['duration'],
                    aspect_ratio=project.script.get('aspect_ratio', '16:9')
                )

                if video_url:
                    scene_state['status'] = 'completed'
                    scene_state['video_url'] = video_url
                    results.append(f"‚úÖ Scene {i+1}: Ho√†n th√†nh")
                else:
                    scene_state['status'] = 'failed'
                    scene_state['error'] = 'Kh√¥ng t·∫°o ƒë∆∞·ª£c video'
                    results.append(f"‚ùå Scene {i+1}: Th·∫•t b·∫°i")

            except Exception as e:
                scene_state['status'] = 'failed'
                scene_state['error'] = str(e)
                results.append(f"‚ùå Scene {i+1}: L·ªói - {str(e)}")

            project.save_state()

        await controller.close()

        summary = "\n".join(results)
        return f"üé¨ K·∫øt qu·∫£ t·∫°o video:\n\n{summary}"

    except Exception as e:
        return f"‚ùå L·ªói: {str(e)}"


def generate_all_videos(cookies_file: str, headless: bool = True) -> str:
    """Wrapper for async video generation"""
    return asyncio.run(generate_all_videos_async(cookies_file, headless))


# ========== Video Download with Auto-Upscale ==========

async def download_all_videos_async(quality: str = "1080p") -> str:
    """Download all generated videos with auto-upscale"""
    try:
        if not project.scenes:
            return "‚ùå Ch∆∞a c√≥ video n√†o ƒë∆∞·ª£c t·∫°o"

        cookies_file = os.path.join(project.get_project_dir(), "../../../config/cookies.json")
        download_dir = os.path.join(project.get_project_dir(), "downloads")

        controller = FlowController(cookies_file, download_dir, headless=True)

        results = []
        for scene_state in project.scenes:
            if scene_state['status'] != 'completed' or not scene_state.get('approved', True):
                continue

            scene_num = scene_state['scene_number']

            try:
                # Try 1080p first
                file_path = await controller.download_video_flow(
                    video_url=scene_state['video_url'],
                    quality="1080p",
                    filename=f"scene_{scene_num:03d}_1080p.mp4"
                )

                if file_path:
                    scene_state['download_path'] = file_path
                    results.append(f"‚úÖ Scene {scene_num}: Downloaded 1080p")
                else:
                    # Fallback to 720p
                    file_path = await controller.download_video_flow(
                        video_url=scene_state['video_url'],
                        quality="720p",
                        filename=f"scene_{scene_num:03d}_720p.mp4"
                    )

                    if file_path:
                        scene_state['download_path'] = file_path
                        results.append(f"‚ö†Ô∏è Scene {scene_num}: Downloaded 720p (1080p failed)")
                    else:
                        results.append(f"‚ùå Scene {scene_num}: Download failed")

            except Exception as e:
                results.append(f"‚ùå Scene {scene_num}: Error - {str(e)}")

            project.save_state()

        await controller.close()

        summary = "\n".join(results)
        return f"üì• K·∫øt qu·∫£ t·∫£i video:\n\n{summary}"

    except Exception as e:
        return f"‚ùå L·ªói: {str(e)}"


def download_all_videos(quality: str = "1080p") -> str:
    """Wrapper for async download"""
    return asyncio.run(download_all_videos_async(quality))


# ========== Video Preview & Approval ==========

def get_scene_preview_data(scene_index: int) -> tuple:
    """Get preview data for a specific scene"""
    try:
        if scene_index >= len(project.scenes):
            return None, "‚ùå Scene kh√¥ng t·ªìn t·∫°i", ""

        scene = project.scenes[scene_index]

        # Build status text
        status_text = f"""**Scene {scene['scene_number']}**
Status: {scene['status']}
Prompt: {scene['prompt'][:100]}...

Approved: {'‚úÖ' if scene.get('approved', False) else '‚ùå'}
"""

        if scene.get('error'):
            status_text += f"\nError: {scene['error']}"

        # Get video path if available
        video_path = scene.get('download_path')

        return video_path, status_text, scene['prompt']

    except Exception as e:
        return None, f"‚ùå Error: {str(e)}", ""


def approve_scene(scene_index: int) -> str:
    """Approve a scene video"""
    try:
        if scene_index >= len(project.scenes):
            return "‚ùå Scene kh√¥ng t·ªìn t·∫°i"

        project.scenes[scene_index]['approved'] = True
        project.save_state()

        return f"‚úÖ Scene {scene_index + 1} ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát"

    except Exception as e:
        return f"‚ùå Error: {str(e)}"


def reject_scene(scene_index: int) -> str:
    """Reject a scene video (mark for regeneration)"""
    try:
        if scene_index >= len(project.scenes):
            return "‚ùå Scene kh√¥ng t·ªìn t·∫°i"

        project.scenes[scene_index]['approved'] = False
        project.scenes[scene_index]['status'] = 'rejected'
        project.save_state()

        return f"‚ùå Scene {scene_index + 1} ƒë√£ b·ªã t·ª´ ch·ªëi, c·∫ßn t·∫°o l·∫°i"

    except Exception as e:
        return f"‚ùå Error: {str(e)}"


async def regenerate_scene_async(scene_index: int, cookies_file: str) -> str:
    """Regenerate a specific scene"""
    try:
        if scene_index >= len(project.scenes):
            return "‚ùå Scene kh√¥ng t·ªìn t·∫°i"

        scene_state = project.scenes[scene_index]
        scene = project.script['scenes'][scene_index]

        # Reset status
        scene_state['status'] = 'generating'
        scene_state['error'] = None
        project.save_state()

        # Initialize controller
        download_dir = os.path.join(project.get_project_dir(), "downloads")
        controller = FlowController(cookies_file, download_dir, headless=True)

        # Generate video
        video_url = await controller.generate_video_flow(
            prompt=scene['veo_prompt'],
            duration=scene['duration'],
            aspect_ratio=project.script.get('aspect_ratio', '16:9')
        )

        if video_url:
            scene_state['status'] = 'completed'
            scene_state['video_url'] = video_url
            scene_state['approved'] = False  # Need review again
            project.save_state()

            await controller.close()
            return f"‚úÖ Scene {scene_index + 1} ƒë√£ ƒë∆∞·ª£c t·∫°o l·∫°i th√†nh c√¥ng"
        else:
            scene_state['status'] = 'failed'
            scene_state['error'] = 'Kh√¥ng t·∫°o ƒë∆∞·ª£c video'
            project.save_state()

            await controller.close()
            return f"‚ùå Scene {scene_index + 1} t·∫°o l·∫°i th·∫•t b·∫°i"

    except Exception as e:
        project.scenes[scene_index]['status'] = 'failed'
        project.scenes[scene_index]['error'] = str(e)
        project.save_state()
        return f"‚ùå Error: {str(e)}"


def regenerate_scene(scene_index: int, cookies_file: str) -> str:
    """Wrapper for async regenerate"""
    return asyncio.run(regenerate_scene_async(scene_index, cookies_file))


def get_all_scenes_summary() -> str:
    """Get summary of all scenes for preview tab"""
    if not project.scenes:
        return "‚ùå Ch∆∞a c√≥ scene n√†o"

    summary_lines = ["# üìä T·ªïng quan c√°c scene\n"]

    for i, scene in enumerate(project.scenes):
        status_emoji = {
            'pending': '‚è≥',
            'generating': 'üé¨',
            'completed': '‚úÖ',
            'failed': '‚ùå',
            'rejected': 'üö´'
        }.get(scene['status'], '‚ùì')

        approved_emoji = '‚úÖ' if scene.get('approved', False) else '‚¨ú'

        summary_lines.append(
            f"{status_emoji} **Scene {scene['scene_number']}** "
            f"[{scene['status']}] {approved_emoji}\n"
            f"   Prompt: {scene['prompt'][:80]}...\n"
        )

    return "\n".join(summary_lines)


# ========== Video Assembly ==========

def assemble_final_video() -> tuple:
    """Assemble all scene videos into final video"""
    try:
        if not project.scenes:
            return "‚ùå Ch∆∞a c√≥ video n√†o", None

        # Get all approved and downloaded scenes
        video_files = []
        for scene_state in sorted(project.scenes, key=lambda x: x['scene_number']):
            if scene_state.get('download_path') and scene_state.get('approved', True):
                video_files.append(scene_state['download_path'])

        if not video_files:
            return "‚ùå Ch∆∞a c√≥ video n√†o ƒë∆∞·ª£c t·∫£i v·ªÅ", None

        # Assemble
        project_dir = project.get_project_dir()
        output_path = os.path.join(project_dir, f"{project.project_name}_final.mp4")

        assembler = VideoAssembler()
        final_path = assembler.assemble_videos(
            video_files=video_files,
            output_path=output_path,
            script=project.script
        )

        if final_path:
            project.final_video_path = final_path
            project.save_state()

            return f"‚úÖ Video ho√†n ch·ªânh ƒë√£ ƒë∆∞·ª£c t·∫°o!\n\nFile: {final_path}", final_path
        else:
            return "‚ùå L·ªói khi n·ªëi video", None

    except Exception as e:
        return f"‚ùå L·ªói: {str(e)}", None


# ========== Create Gradio UI ==========

def create_complete_ui():
    """Create the complete Gradio interface"""

    with gr.Blocks(title="VEO 3.1 Complete Automation", theme=gr.themes.Soft()) as app:
        gr.Markdown("""
        # üé¨ VEO 3.1 Complete Automation System
        H·ªá th·ªëng t·ª± ƒë·ªông h√≥a ho√†n ch·ªânh cho video AI
        """)

        # Tab 1: Project Setup
        with gr.Tab("1Ô∏è‚É£ Kh·ªüi t·∫°o d·ª± √°n"):
            gr.Markdown("## B∆∞·ªõc 1: T·∫£i API Key")

            with gr.Row():
                api_key_file = gr.File(label="üìÅ Ch·ªçn file TXT ch·ª©a API key", file_types=[".txt"])

            api_key_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=3, interactive=False)
            api_key_display = gr.Textbox(label="API Key", type="password", interactive=False)

            api_key_file.change(
                fn=load_api_key_from_file,
                inputs=[api_key_file],
                outputs=[api_key_status, api_key_display]
            )

            gr.Markdown("## B∆∞·ªõc 2: Thi·∫øt l·∫≠p d·ª± √°n")

            with gr.Row():
                project_name_input = gr.Textbox(
                    label="T√™n d·ª± √°n",
                    placeholder="VD: video_marketing_2024",
                    value="demo_project_test"
                )
                output_folder_input = gr.Textbox(
                    label="Th∆∞ m·ª•c l∆∞u video",
                    value="./data/projects"
                )

            model_select = gr.Dropdown(
                label="Ch·ªçn m√¥ h√¨nh AI",
                choices=["gemini-2.0-flash-exp", "gemini-1.5-pro", "gemini-1.5-flash"],
                value="gemini-2.0-flash-exp"
            )

            init_project_btn = gr.Button("üöÄ Kh·ªüi t·∫°o d·ª± √°n", variant="primary")
            init_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=5, interactive=False)

            init_project_btn.click(
                fn=initialize_project,
                inputs=[project_name_input, output_folder_input, model_select],
                outputs=[init_status]
            )

        # Tab 2: Script Generation
        with gr.Tab("2Ô∏è‚É£ T·∫°o k·ªãch b·∫£n"):
            gr.Markdown("## T·∫°o k·ªãch b·∫£n t·ª± ƒë·ªông")

            with gr.Row():
                with gr.Column():
                    topic_input = gr.Textbox(
                        label="Ch·ªß ƒë·ªÅ video",
                        placeholder="VD: H∆∞·ªõng d·∫´n l√†m b√°nh pizza t·∫°i nh√†",
                        value="H∆∞·ªõng d·∫´n n·∫•u m√≥n ph·ªü Vi·ªát Nam truy·ªÅn th·ªëng - t·ª´ h·∫ßm x∆∞∆°ng ƒë·∫øn ho√†n thi·ªán t√¥ ph·ªü",
                        lines=3
                    )

                    with gr.Row():
                        duration_input = gr.Slider(
                            label="T·ªïng th·ªùi l∆∞·ª£ng (gi√¢y)",
                            minimum=10,
                            maximum=300,
                            value=60,
                            step=5
                        )
                        scene_duration_input = gr.Slider(
                            label="Th·ªùi l∆∞·ª£ng m·ªói c·∫£nh (gi√¢y)",
                            minimum=3,
                            maximum=20,
                            value=8,
                            step=1
                        )

                    style_input = gr.Dropdown(
                        label="Phong c√°ch h√¨nh ·∫£nh",
                        choices=["Realistic", "Cinematic", "Artistic", "Documentary", "Animated"],
                        value="Cinematic"
                    )

                    aspect_ratio_input = gr.Dropdown(
                        label="T·ª∑ l·ªá khung h√¨nh",
                        choices=["16:9", "9:16", "1:1"],
                        value="16:9"
                    )

                with gr.Column():
                    character_mode = gr.Radio(
                        label="Ch·∫ø ƒë·ªô nh√¢n v·∫≠t",
                        choices=["Kh√¥ng c√≥ nh√¢n v·∫≠t", "AI t·ª± nh·∫≠n di·ªán", "Upload ·∫£nh nh√¢n v·∫≠t"],
                        value="AI t·ª± nh·∫≠n di·ªán"
                    )

                    character_images = gr.File(
                        label="Upload ·∫£nh nh√¢n v·∫≠t (n·∫øu c√≥)",
                        file_count="multiple",
                        file_types=["image"]
                    )

                    character_desc = gr.Textbox(
                        label="M√¥ t·∫£ nh√¢n v·∫≠t",
                        placeholder="VD: M·ªôt ƒë·∫ßu b·∫øp nam, 30 tu·ªïi, m·∫∑c ƒë·ªìng ph·ª•c tr·∫Øng...",
                        lines=3
                    )

            generate_script_btn = gr.Button("üìù T·∫°o k·ªãch b·∫£n", variant="primary", size="lg")

            script_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=3, interactive=False)
            script_output = gr.JSON(label="K·ªãch b·∫£n JSON")
            script_file_output = gr.File(label="üì• T·∫£i k·ªãch b·∫£n")

            generate_script_btn.click(
                fn=generate_script_with_characters,
                inputs=[
                    topic_input, duration_input, scene_duration_input,
                    style_input, aspect_ratio_input, character_mode,
                    character_images, character_desc
                ],
                outputs=[script_status, script_output, script_file_output]
            )

        # Tab 3: SEO Content
        with gr.Tab("3Ô∏è‚É£ T·∫°o n·ªôi dung SEO"):
            gr.Markdown("## T·∫°o ti√™u ƒë·ªÅ, m√¥ t·∫£, tags cho YouTube")

            generate_seo_btn = gr.Button("üéØ T·∫°o n·ªôi dung SEO", variant="primary")

            seo_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=2, interactive=False)
            seo_output = gr.Textbox(label="N·ªôi dung SEO", lines=20, interactive=False)

            generate_seo_btn.click(
                fn=generate_seo_content,
                inputs=[script_output],
                outputs=[seo_status, seo_output]
            )

        # Tab 4: Generate Videos
        with gr.Tab("4Ô∏è‚É£ T·∫°o video"):
            gr.Markdown("## Sinh video cho t·ª´ng ph√¢n c·∫£nh")

            with gr.Row():
                cookies_file_input = gr.Textbox(
                    label="File cookies.json",
                    value="./config/cookies.json"
                )
                headless_checkbox = gr.Checkbox(label="Ch·∫°y ·∫©n (headless)", value=True)

            generate_videos_btn = gr.Button("üé¨ T·∫°o t·∫•t c·∫£ video", variant="primary", size="lg")
            video_gen_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=15, interactive=False)

            generate_videos_btn.click(
                fn=generate_all_videos,
                inputs=[cookies_file_input, headless_checkbox],
                outputs=[video_gen_status]
            )

        # Tab 5: Preview & Approve
        with gr.Tab("5Ô∏è‚É£ Xem tr∆∞·ªõc & ph√™ duy·ªát"):
            gr.Markdown("## Player xem tr∆∞·ªõc video")

            # Summary of all scenes
            refresh_summary_btn = gr.Button("üîÑ L√†m m·ªõi danh s√°ch", size="sm")
            scenes_summary = gr.Markdown("Ch∆∞a c√≥ scene n√†o")

            refresh_summary_btn.click(
                fn=get_all_scenes_summary,
                inputs=[],
                outputs=[scenes_summary]
            )

            gr.Markdown("---")
            gr.Markdown("### Xem chi ti·∫øt t·ª´ng scene")

            # Scene selector - fixed maximum to avoid JSON schema issues
            scene_selector = gr.Number(
                label="Ch·ªçn scene (nh·∫≠p s·ªë t·ª´ 0)",
                value=0,
                precision=0
            )

            with gr.Row():
                with gr.Column(scale=2):
                    preview_video = gr.Video(label="Video preview", interactive=False)

                with gr.Column(scale=1):
                    preview_status = gr.Markdown("Ch·ªçn scene ƒë·ªÉ xem")
                    preview_prompt = gr.Textbox(label="Prompt", lines=4, interactive=False)

                    with gr.Row():
                        approve_btn = gr.Button("‚úÖ Ph√™ duy·ªát", variant="primary")
                        reject_btn = gr.Button("‚ùå T·ª´ ch·ªëi", variant="stop")

                    action_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=2, interactive=False)

                    gr.Markdown("---")

                    cookies_for_regen = gr.Textbox(
                        label="File cookies (ƒë·ªÉ t·∫°o l·∫°i)",
                        value="./config/cookies.json"
                    )
                    regenerate_btn = gr.Button("üîÑ T·∫°o l·∫°i scene n√†y", variant="secondary")

            # Connect functions
            scene_selector.change(
                fn=get_scene_preview_data,
                inputs=[scene_selector],
                outputs=[preview_video, preview_status, preview_prompt]
            )

            approve_btn.click(
                fn=approve_scene,
                inputs=[scene_selector],
                outputs=[action_status]
            )

            reject_btn.click(
                fn=reject_scene,
                inputs=[scene_selector],
                outputs=[action_status]
            )

            regenerate_btn.click(
                fn=regenerate_scene,
                inputs=[scene_selector, cookies_for_regen],
                outputs=[action_status]
            )

        # Tab 6: Download Videos
        with gr.Tab("6Ô∏è‚É£ T·∫£i video"):
            gr.Markdown("## T·∫£i h√†ng lo·∫°t video (Auto-upscale 1080p)")

            quality_select = gr.Radio(
                label="Ch·∫•t l∆∞·ª£ng ∆∞u ti√™n",
                choices=["1080p", "720p"],
                value="1080p"
            )

            download_btn = gr.Button("üì• T·∫£i t·∫•t c·∫£ video", variant="primary", size="lg")
            download_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=15, interactive=False)

            download_btn.click(
                fn=download_all_videos,
                inputs=[quality_select],
                outputs=[download_status]
            )

        # Tab 7: Assemble Final Video
        with gr.Tab("7Ô∏è‚É£ N·ªëi video"):
            gr.Markdown("## N·ªëi c√°c video th√†nh file ho√†n ch·ªânh")

            assemble_btn = gr.Button("üéûÔ∏è N·ªëi video", variant="primary", size="lg")

            assemble_status = gr.Textbox(label="Tr·∫°ng th√°i", lines=3, interactive=False)
            final_video_output = gr.Video(label="Video ho√†n ch·ªânh")

            assemble_btn.click(
                fn=assemble_final_video,
                inputs=[],
                outputs=[assemble_status, final_video_output]
            )

    return app


# ========== Main ==========

if __name__ == "__main__":
    print("="*60)
    print("VEO 3.1 Complete Automation System")
    print("H·ªá th·ªëng t·ª± ƒë·ªông h√≥a ho√†n ch·ªânh")
    print("="*60)
    print("\nLaunching Gradio interface...")
    print("Access at: http://localhost:7860")
    print("="*60)

    app = create_complete_ui()
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True
    )
