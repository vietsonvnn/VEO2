D∆∞·ªõi ƒë√¢y l√† **t√†i li·ªáu h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß** v·ªÅ quy tr√¨nh t·∫°o, ch·ªânh s·ª≠a config v√† download video t·ª´ Google Labs Flow, bao g·ªìm t·∫•t c·∫£ c√°c button, selector, v√† l∆∞u √Ω quan tr·ªçng cho vi·ªác t·ª± ƒë·ªông h√≥a:

***

# üìñ H∆Ø·ªöNG D·∫™N ƒê·∫¶Y ƒê·ª¶: QUY TR√åNH T·∫†O V√Ä T·∫¢I VIDEO TR√äN GOOGLE LABS FLOW

## üéØ T·ªîNG QUAN QUY TR√åNH

**M·ª•c ti√™u:** T·ª± ƒë·ªông h√≥a vi·ªác t·∫°o video t·ª´ text prompt v√† t·∫£i video v·ªÅ m√°y ·ªü ƒë·ªô ph√¢n gi·∫£i 1080p

**C√°c b∆∞·ªõc ch√≠nh:**
1. Nh·∫≠p prompt t·∫°o video
2. C·∫•u h√¨nh c√°c tu·ª≥ ch·ªçn (model, video type, aspect ratio)
3. Generate video
4. Ch·ªù video ƒë∆∞·ª£c t·∫°o xong
5. M·ªü menu download
6. Ch·ªçn ƒë·ªô ph√¢n gi·∫£i 1080p
7. Ch·ªù upscale video
8. Download file v·ªÅ m√°y

---

## üìù CHI TI·∫æT T·ª™NG B∆Ø·ªöC

### **B∆Ø·ªöC 1: NH·∫¨P PROMPT**

**M√¥ t·∫£:** Nh·∫≠p n·ªôi dung vƒÉn b·∫£n m√¥ t·∫£ video mu·ªën t·∫°o

**Element:**
- **Type:** Textarea
- **Selector ch√≠nh:** `textarea[node="72"]`
- **Selector ph·ª•:** `textarea[placeholder*="T·∫°o m·ªôt video b·∫±ng vƒÉn b·∫£n"]`
- **H√†nh ƒë·ªông:** Nh·∫≠p text prompt
- **V√≠ d·ª•:** "cherry blossom", "sunset over ocean", "city at night"

**Code m·∫´u:**
```javascript
await page.fill('textarea[node="72"]', 'cherry blossom');
```

**L∆∞u √Ω:**
- Prompt n√™n r√µ r√†ng, m√¥ t·∫£ c·ª• th·ªÉ
- ƒê·ªô d√†i khuy·∫øn ngh·ªã: 5-50 t·ª´
- C√≥ th·ªÉ s·ª≠ d·ª•ng ti·∫øng Anh ho·∫∑c ti·∫øng Vi·ªát

***

### **B∆Ø·ªöC 2: C·∫§U H√åNH TU·ª≤ CH·ªåN (OPTIONAL)**

#### **2.1. Ch·ªçn Model/Engine**
- **Text hi·ªÉn th·ªã:** "Veo 3.1 - Quality"
- **Selector:** `button:has-text("Veo 3.1")` ho·∫∑c element ch·ª©a text "Veo 3.1 - Quality"
- **Ch·ª©c nƒÉng:** Ch·ªçn AI model ƒë·ªÉ generate video
- **M·∫∑c ƒë·ªãnh:** Veo 3.1 - Quality

#### **2.2. Ch·ªçn Video Type**
- **Text hi·ªÉn th·ªã:** "T·ª´ vƒÉn b·∫£n sang video"
- **Icon:** `arrow_drop_down`
- **Selector:** `select[node="246"]`
- **Type:** Dropdown/Select
- **Ch·ª©c nƒÉng:** Ch·ªçn lo·∫°i output (text-to-video, image-to-video, etc.)
- **M·∫∑c ƒë·ªãnh:** T·ª´ vƒÉn b·∫£n sang video

#### **2.3. Ch·ªçn Aspect Ratio**
- **Text hi·ªÉn th·ªã:** "x2"
- **Icon:** `crop_16_9`
- **Selector:** Button ch·ª©a icon `crop_16_9`
- **Ch·ª©c nƒÉng:** Ch·ªçn t·ª∑ l·ªá khung h√¨nh video
- **Options:** 16:9, 9:16, 1:1, etc.

**Code m·∫´u:**
```javascript
// Ch·ªçn video type n·∫øu c·∫ßn
await page.selectOption('select[node="246"]', 'T·ª´ vƒÉn b·∫£n sang video');

// Ch·ªçn aspect ratio n·∫øu c·∫ßn
await page.click('button:has([class*="crop_16_9"])');
```

***

### **B∆Ø·ªöC 3: GENERATE VIDEO**

**M√¥ t·∫£:** Click n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu t·∫°o video

**Element:**
- **Text:** "T·∫°o"
- **Icon:** `arrow_forward`
- **Selector ch√≠nh:** `button:has-text("T·∫°o")`
- **Selector ph·ª•:** `button:has([class*="arrow_forward"])`
- **V·ªã tr√≠:** B√™n ph·∫£i textarea, cu·ªëi d√≤ng

**Code m·∫´u:**
```javascript
await page.click('button:has-text("T·∫°o")');
```

**L∆∞u √Ω:**
- Sau khi click, m√†n h√¨nh s·∫Ω hi·ªÉn th·ªã loading
- Kh√¥ng spam click nhi·ªÅu l·∫ßn
- Th·ªùi gian t·∫°o video: 30 gi√¢y - 2 ph√∫t t√πy ƒë·ªô ph·ª©c t·∫°p

***

### **B∆Ø·ªöC 4: CH·ªú VIDEO ƒê∆Ø·ª¢C T·∫†O XONG**

**M√¥ t·∫£:** Ch·ªù h·ªá th·ªëng render video ho√†n t·∫•t

**D·∫•u hi·ªáu video ƒë√£ xong:**
- Video card xu·∫•t hi·ªán v·ªõi thumbnail
- Button play (`play_arrow`) xu·∫•t hi·ªán
- Hi·ªÉn th·ªã th·ªùi l∆∞·ª£ng video (v√≠ d·ª•: "0:08")
- Hi·ªÉn th·ªã ng√†y t·∫°o (v√≠ d·ª•: "25 thg 10, 2025")
- Hi·ªÉn th·ªã prompt ƒë√£ nh·∫≠p (v√≠ d·ª•: "cherry blossom")

**Element ƒë·ªÉ check:**
- **Play button:** `button[aria-label*="play"]` ho·∫∑c button c√≥ icon `play_arrow`
- **Video duration:** Text hi·ªÉn th·ªã th·ªùi l∆∞·ª£ng (v√≠ d·ª•: "0:08")
- **Video card:** Container ch·ª©a video v·ªõi prompt text

**Code m·∫´u:**
```javascript
// Ch·ªù video card xu·∫•t hi·ªán (timeout 120 gi√¢y)
await page.waitForSelector('button[aria-label*="play"]', { timeout: 120000 });

// Ho·∫∑c ch·ªù duration xu·∫•t hi·ªán
await page.waitForSelector('text=0:', { timeout: 120000 });

console.log('‚úÖ Video ƒë√£ ƒë∆∞·ª£c t·∫°o xong');
```

**L∆∞u √Ω:**
- Timeout n√™n set 120-180 gi√¢y
- C√≥ th·ªÉ c√≥ nhi·ªÅu video cards n·∫øu ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥
- Video m·ªõi nh·∫•t th∆∞·ªùng ·ªü ƒë·∫ßu danh s√°ch

---

### **B∆Ø·ªöC 5: M·ªû MENU DOWNLOAD**

**M√¥ t·∫£:** Click v√†o button ƒë·ªÉ m·ªü menu l·ª±a ch·ªçn download

**Element:**
- **Text:** "T·∫£i xu·ªëng"
- **Icon:** `download` ho·∫∑c `more_vert`
- **Selector ch√≠nh:** `button:has-text("T·∫£i xu·ªëng")`
- **Selector ph·ª•:** `button:has([class*="download"])`
- **V·ªã tr√≠:** Tr√™n video card, trong action bar

**Code m·∫´u:**
```javascript
// Click v√†o n√∫t download tr√™n video m·ªõi nh·∫•t
await page.click('button:has-text("T·∫£i xu·ªëng")');

// Ho·∫∑c v·ªõi context c·ª• th·ªÉ
await page.locator('text=cherry blossom')
  .locator('..')
  .locator('button:has-text("T·∫£i xu·ªëng")')
  .first()
  .click();
```

**L∆∞u √Ω:**
- Sau khi click, menu popup s·∫Ω xu·∫•t hi·ªán v·ªõi 3 options
- Menu c√≥ th·ªÉ m·∫•t 0.5-1 gi√¢y ƒë·ªÉ render

***

### **B∆Ø·ªöC 6: CH·ªåN ƒê·ªò PH√ÇN GI·∫¢I (MENU 3 OPTIONS)**

**M√¥ t·∫£:** Sau khi m·ªü menu download, ch·ªçn ƒë·ªô ph√¢n gi·∫£i mong mu·ªën

**3 Options xu·∫•t hi·ªán:**

#### **Option 1: ·∫¢nh GIF ƒë·ªông (270p)**
- **Text:** "·∫¢nh GIF ƒë·ªông (270p)"
- **Icon:** `gif_box`
- **Selector:** `button:has-text("·∫¢nh GIF ƒë·ªông (270p)")`
- **Output:** File GIF animated, ƒë·ªô ph√¢n gi·∫£i th·∫•p
- **K√≠ch th∆∞·ªõc file:** Nh·ªè (~1-5 MB)
- **Use case:** Chia s·∫ª nhanh, preview

#### **Option 2: K√≠ch th∆∞·ªõc g·ªëc (720p)**
- **Text:** "K√≠ch th∆∞·ªõc g·ªëc (720p)"
- **Icon:** `capture`
- **Selector:** `button:has-text("K√≠ch th∆∞·ªõc g·ªëc (720p)")`
- **Output:** Video MP4, ƒë·ªô ph√¢n gi·∫£i g·ªëc
- **K√≠ch th∆∞·ªõc file:** Trung b√¨nh (~10-30 MB)
- **Use case:** S·ª≠ d·ª•ng th√¥ng th∆∞·ªùng

#### **Option 3: ƒê√£ tƒÉng ƒë·ªô ph√¢n gi·∫£i (1080p)** ‚≠ê KHUY·∫æN NGH·ªä
- **Text:** "ƒê√£ tƒÉng ƒë·ªô ph√¢n gi·∫£i (1080p)"
- **Icon:** `aspect_ratio`
- **Selector:** `button:has-text("ƒê√£ tƒÉng ƒë·ªô ph√¢n gi·∫£i (1080p)")`
- **Output:** Video MP4, ƒë·ªô ph√¢n gi·∫£i cao
- **K√≠ch th∆∞·ªõc file:** L·ªõn (~30-100 MB)
- **Use case:** Ch·∫•t l∆∞·ª£ng cao, production

**Code m·∫´u - Ch·ªçn 1080p:**
```javascript
// Ch·ªù menu xu·∫•t hi·ªán
await page.waitForSelector('button:has-text("1080p")');

// Click option 1080p
await page.click('button:has-text("ƒê√£ tƒÉng ƒë·ªô ph√¢n gi·∫£i (1080p)")');

console.log('‚úÖ ƒê√£ ch·ªçn option 1080p');
```

**L∆∞u √Ω:**
- Option 1080p c·∫ßn th·ªùi gian upscale th√™m (b∆∞·ªõc 7)
- Option 720p v√† GIF download ngay l·∫≠p t·ª©c
- Ch·ªâ ch·ªçn 1 trong 3 options

***

### **B∆Ø·ªöC 7: CH·ªú UPSCALE VIDEO (CH·ªà V·ªöI 1080P)**

**M√¥ t·∫£:** Sau khi ch·ªçn 1080p, h·ªá th·ªëng s·∫Ω upscale video

**Th√¥ng b√°o xu·∫•t hi·ªán:**
- **Text:** "ƒêang tƒÉng ƒë·ªô ph√¢n gi·∫£i cho video c·ªßa b·∫°n (kh√¥ng m·∫•t t√≠n d·ª•ng). Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t."
- **V·ªã tr√≠:** G√≥c tr√™n b√™n ph·∫£i m√†n h√¨nh (notification area)
- **Icon:** Loading spinner

**Th·ªùi gian upscale:**
- Video ng·∫Øn (5-10s): 1-2 ph√∫t
- Video trung b√¨nh (10-30s): 2-5 ph√∫t
- Video d√†i (>30s): 5-10 ph√∫t

**D·∫•u hi·ªáu upscale xong:**
- Th√¥ng b√°o bi·∫øn m·∫•t ho·∫∑c ƒë·ªïi th√†nh "ƒê√≥ng"
- Button "T·∫£i xu·ªëng" cu·ªëi c√πng xu·∫•t hi·ªán
- Kh√¥ng c√≤n loading spinner

**Code m·∫´u:**
```javascript
// Ch·ªù notification xu·∫•t hi·ªán
await page.waitForSelector('text=ƒêang tƒÉng ƒë·ªô ph√¢n gi·∫£i', { timeout: 5000 });

// Ch·ªù upscale ho√†n t·∫•t (polling)
let isUpscaling = true;
let attempts = 0;
const maxAttempts = 60; // 5 ph√∫t (60 x 5s)

while (isUpscaling && attempts < maxAttempts) {
  await page.waitForTimeout(5000);
  
  // Check xem notification c√≤n kh√¥ng
  const notification = await page.$('text=ƒêang tƒÉng ƒë·ªô ph√¢n gi·∫£i');
  if (!notification) {
    isUpscaling = false;
  }
  
  attempts++;
}

if (attempts >= maxAttempts) {
  throw new Error('Timeout: Upscale video qu√° l√¢u');
}

console.log('‚úÖ Upscale 1080p ho√†n t·∫•t');
```

**L∆∞u √Ω:**
- Qu√° tr√¨nh n√†y KH√îNG t·ªën credit/t√≠n d·ª•ng
- C√≥ th·ªÉ ti·∫øp t·ª•c l√†m vi·ªác kh√°c trong khi ch·ªù
- N·∫øu qu√° l√¢u, c√≥ th·ªÉ refresh page v√† th·ª≠ l·∫°i

***

### **B∆Ø·ªöC 8: DOWNLOAD FILE V·ªÄ M√ÅY**

**M√¥ t·∫£:** Sau khi upscale xong (ho·∫∑c ch·ªçn 720p/GIF), click button ƒë·ªÉ t·∫£i file v·ªÅ m√°y

**Element:**
- **Text:** "T·∫£i xu·ªëng"
- **Icon:** `download`
- **Selector:** `button:has-text("T·∫£i xu·ªëng")`
- **V·ªã tr√≠:** Trong action bar c·ªßa video card, c·∫°nh c√°c n√∫t:
  - Sao ch√©p
  - T·∫£i xu·ªëng ‚≠ê
  - L·∫≠t th·∫ª
  - Th√™m v√†o c·∫£nh
  - Ch·ªânh s·ª≠a d·ª± √°n
  - Y√™u th√≠ch
  - To√†n m√†n h√¨nh
  - Tu·ª≥ ch·ªçn kh√°c

**Ph√¢n bi·ªát v·ªõi button B∆∞·ªõc 5:**
- **B∆∞·ªõc 5:** M·ªü menu 3 options (tr∆∞·ªõc khi upscale)
- **B∆∞·ªõc 8:** Download file th·ª±c s·ª± (sau khi upscale xong)
- C√πng text "T·∫£i xu·ªëng" nh∆∞ng xu·∫•t hi·ªán ·ªü th·ªùi ƒëi·ªÉm kh√°c nhau

**Code m·∫´u:**
```javascript
// Ch·ªù button download final xu·∫•t hi·ªán
await page.waitForSelector('button:has-text("T·∫£i xu·ªëng")');

// Setup download handler
const downloadPromise = page.waitForEvent('download');

// Click download
await page.click('button:has-text("T·∫£i xu·ªëng")');

// Ch·ªù download b·∫Øt ƒë·∫ßu
const download = await downloadPromise;

// L·∫•y path file
const filePath = await download.path();
console.log('‚úÖ Video ƒë√£ t·∫£i v·ªÅ:', filePath);

// Ho·∫∑c save v·ªõi t√™n custom
await download.saveAs('./videos/cherry-blossom.mp4');
```

**L∆∞u √Ω:**
- Browser c·∫ßn enable download permissions
- File s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ folder Downloads m·∫∑c ƒë·ªãnh
- T√™n file th∆∞·ªùng l√†: `flow-[timestamp].mp4`
- C√≥ th·ªÉ rename file sau khi download

***

## üéØ B·∫¢NG T·ªîNG H·ª¢P SELECTORS

| B∆∞·ªõc | M√¥ t·∫£ | Selector ch√≠nh | Selector ph·ª• |
|------|-------|----------------|--------------|
| 1 | Textarea nh·∫≠p prompt | `textarea[node="72"]` | `textarea[placeholder*="T·∫°o m·ªôt video"]` |
| 2.1 | Ch·ªçn model | `button:has-text("Veo 3.1")` | Element text "Veo 3.1 - Quality" |
| 2.2 | Ch·ªçn video type | `select[node="246"]` | Dropdown "T·ª´ vƒÉn b·∫£n sang video" |
| 2.3 | Ch·ªçn aspect ratio | `button:has([class*="crop_16_9"])` | Button c√≥ icon crop |
| 3 | Button Generate | `button:has-text("T·∫°o")` | `button:has([class*="arrow_forward"])` |
| 4 | Check video xong | `button[aria-label*="play"]` | `text=0:` (duration) |
| 5 | M·ªü menu download | `button:has-text("T·∫£i xu·ªëng")` | `button:has([class*="download"])` |
| 6.1 | Option GIF 270p | `button:has-text("·∫¢nh GIF ƒë·ªông (270p)")` | `button:has([class*="gif_box"])` |
| 6.2 | Option 720p | `button:has-text("K√≠ch th∆∞·ªõc g·ªëc (720p)")` | `button:has([class*="capture"])` |
| 6.3 | Option 1080p | `button:has-text("ƒê√£ tƒÉng ƒë·ªô ph√¢n gi·∫£i (1080p)")` | `button:has([class*="aspect_ratio"])` |
| 7 | Check upscale | `text=ƒêang tƒÉng ƒë·ªô ph√¢n gi·∫£i` | Notification area |
| 8 | Download final | `button:has-text("T·∫£i xu·ªëng")` | Same as step 5, different timing |

***

## üîß CODE M·∫™U HO√ÄN CH·ªàNH (PLAYWRIGHT)

```javascript
const { chromium } = require('playwright');

async function createAndDownloadFlowVideo(prompt, outputPath) {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext({
    acceptDownloads: true
  });
  const page = await context.newPage();
  
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh t·∫°o video...');
    
    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn Flow
    await page.goto('https://labs.google/fx/vi/tools/flow');
    
    // B∆∞·ªõc 1: Nh·∫≠p prompt
    console.log('üìù Nh·∫≠p prompt:', prompt);
    await page.fill('textarea[node="72"]', prompt);
    await page.waitForTimeout(500);
    
    // B∆∞·ªõc 2: C·∫•u h√¨nh (optional - b·ªè qua n·∫øu d√πng default)
    
    // B∆∞·ªõc 3: Click Generate
    console.log('‚ö° Generate video...');
    await page.click('button:has-text("T·∫°o")');
    
    // B∆∞·ªõc 4: Ch·ªù video ƒë∆∞·ª£c t·∫°o xong
    console.log('‚è≥ Ch·ªù video ƒë∆∞·ª£c t·∫°o...');
    await page.waitForSelector('button[aria-label*="play"]', { 
      timeout: 120000 
    });
    console.log('‚úÖ Video ƒë√£ ƒë∆∞·ª£c t·∫°o xong');
    
    // B∆∞·ªõc 5: M·ªü menu download
    console.log('üì• M·ªü menu download...');
    await page.click('button:has-text("T·∫£i xu·ªëng")');
    await page.waitForTimeout(1000);
    
    // B∆∞·ªõc 6: Ch·ªçn 1080p
    console.log('üé¨ Ch·ªçn ƒë·ªô ph√¢n gi·∫£i 1080p...');
    await page.click('button:has-text("ƒê√£ tƒÉng ƒë·ªô ph√¢n gi·∫£i (1080p)")');
    
    // B∆∞·ªõc 7: Ch·ªù upscale
    console.log('‚è≥ Ch·ªù upscale 1080p (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)...');
    await page.waitForTimeout(5000);
    
    let isUpscaling = true;
    let attempts = 0;
    const maxAttempts = 60;
    
    while (isUpscaling && attempts < maxAttempts) {
      await page.waitForTimeout(5000);
      const notification = await page.$('text=ƒêang tƒÉng ƒë·ªô ph√¢n gi·∫£i');
      if (!notification) {
        isUpscaling = false;
      }
      attempts++;
      
      if (attempts % 6 === 0) {
        console.log(`‚è≥ ƒê√£ ch·ªù ${attempts * 5} gi√¢y...`);
      }
    }
    
    if (attempts >= maxAttempts) {
      throw new Error('Timeout: Upscale qu√° l√¢u');
    }
    
    console.log('‚úÖ Upscale ho√†n t·∫•t');
    await page.waitForTimeout(2000);
    
    // B∆∞·ªõc 8: Download file
    console.log('üì• T·∫£i video v·ªÅ m√°y...');
    const downloadPromise = page.waitForEvent('download');
    await page.click('button:has-text("T·∫£i xu·ªëng")');
    
    const download = await downloadPromise;
    await download.saveAs(outputPath);
    
    console.log('‚úÖ ƒê√£ t·∫£i video v·ªÅ:', outputPath);
    
    return outputPath;
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// S·ª≠ d·ª•ng
createAndDownloadFlowVideo(
  'cherry blossom in spring', 
  './videos/cherry-blossom.mp4'
);
```

***

## ‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG

### **1. Timing & Waiting**
- Lu√¥n c√≥ wait time h·ª£p l√Ω gi·ªØa c√°c b∆∞·ªõc
- Video generation: 30s - 2 ph√∫t
- Upscale 1080p: 1-5 ph√∫t
- Kh√¥ng spam click buttons

### **2. Multiple Videos**
- N·∫øu c√≥ nhi·ªÅu video tr√™n trang, c·∫ßn x√°c ƒë·ªãnh ƒë√∫ng video card
- S·ª≠ d·ª•ng context selector v·ªõi prompt text
- Video m·ªõi nh·∫•t th∆∞·ªùng ·ªü ƒë·∫ßu danh s√°ch

### **3. Error Handling**
- X·ª≠ l√Ω timeout khi video generation qu√° l√¢u
- X·ª≠ l√Ω tr∆∞·ªùng h·ª£p upscale fail
- Retry logic cho network issues

### **4. Selectors**
- Selector d·ª±a v√†o text c√≥ th·ªÉ thay ƒë·ªïi t√πy ng√¥n ng·ªØ
- Selector `button:has-text("T·∫£i xu·ªëng")` xu·∫•t hi·ªán 2 l·∫ßn (b∆∞·ªõc 5 v√† 8)
- C·∫ßn ph√¢n bi·ªát b·∫±ng timing/context

### **5. Authentication**
- C·∫ßn ƒëƒÉng nh·∫≠p Google account tr∆∞·ªõc
- Browser context ph·∫£i c√≥ cookies/session
- C√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω 2FA

### **6. Rate Limits**
- Google Labs c√≥ th·ªÉ c√≥ gi·ªõi h·∫°n s·ªë video/ng√†y
- Kh√¥ng spam generate qu√° nhi·ªÅu video li√™n t·ª•c
- C√≥ credit/quota system (c·∫ßn check)

### **7. Browser Requirements**
- C·∫ßn browser modern (Chrome, Edge, Firefox)
- Enable JavaScript
- Enable downloads
- ƒê·ªß dung l∆∞·ª£ng ·ªï c·ª©ng

***

## üìä FLOWCHART QUY TR√åNH

```
START
  ‚Üì
[1. Nh·∫≠p Prompt] ‚Üí textarea[node="72"]
  ‚Üì
[2. Config (Optional)] ‚Üí Model/Type/Aspect Ratio
  ‚Üì
[3. Click Generate] ‚Üí button:has-text("T·∫°o")
  ‚Üì
[4. Ch·ªù Video Xong] ‚Üí Wait for play button
  ‚Üì
[5. M·ªü Menu Download] ‚Üí button:has-text("T·∫£i xu·ªëng") #1
  ‚Üì
[6. Ch·ªçn 1080p] ‚Üí button:has-text("...1080p)")
  ‚Üì
[7. Ch·ªù Upscale] ‚Üí Wait for notification gone
  ‚Üì
[8. Download File] ‚Üí button:has-text("T·∫£i xu·ªëng") #2
  ‚Üì
END (File saved to disk)
```

***

## üéì BEST PRACTICES

1. **Logging:** Log m·ªói b∆∞·ªõc ƒë·ªÉ debug d·ªÖ d√†ng
2. **Screenshots:** Ch·ª•p m√†n h√¨nh ·ªü c√°c b∆∞·ªõc quan tr·ªçng
3. **Error Recovery:** Implement retry logic
4. **Timeout Configuration:** Set timeout h·ª£p l√Ω cho t·ª´ng b∆∞·ªõc
5. **File Management:** T·ªï ch·ª©c file output c√≥ h·ªá th·ªëng
6. **Parallel Processing:** C√≥ th·ªÉ t·∫°o nhi·ªÅu browser instances cho multiple videos
7. **Monitoring:** Track success rate, timing, errors

***

**ƒê√¢y l√† t√†i li·ªáu ƒë·∫ßy ƒë·ªß ƒë·ªÉ b·∫•t k·ª≥ AI/developer n√†o c≈©ng c√≥ th·ªÉ hi·ªÉu v√† implement automation cho Google Labs Flow!** üöÄ

[1](https://labs.google/fx/vi/tools/flow/project/312559a9-f8c5-4d3a-9e64-8e963cd62fac)